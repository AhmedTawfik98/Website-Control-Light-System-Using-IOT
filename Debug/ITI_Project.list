
ITI_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08000c18  08000c18  00010c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc0  08000cc8  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000cc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000cc8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000101c  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065a  00000000  00000000  00011d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00012370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00012570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ddb  00000000  00000000  00012708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001191  00000000  00000000  000134e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ae0  00000000  00000000  00014674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00018154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006a0  00000000  00000000  000181a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c00 	.word	0x08000c00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c00 	.word	0x08000c00

080001d4 <MGPIO_vSetPinMode>:
#include"../Inc/MCAL/MGPIO/MGPIO_Private.h"
#include"../Inc/MCAL/MGPIO/MGPIO_Config.h"



void MGPIO_vSetPinMode(u8 A_u8PortId, u8 A_PinNo, u8 A_u8Mode){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]

	if(A_u8Mode == GPIO_MODE_INPUT){
 80001e6:	797b      	ldrb	r3, [r7, #5]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d152      	bne.n	8000292 <MGPIO_vSetPinMode+0xbe>
		switch(A_u8PortId){
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d037      	beq.n	8000262 <MGPIO_vSetPinMode+0x8e>
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	f300 8155 	bgt.w	80004a2 <MGPIO_vSetPinMode+0x2ce>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <MGPIO_vSetPinMode+0x2e>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d018      	beq.n	8000232 <MGPIO_vSetPinMode+0x5e>
			GPIOC -> MODER |= (A_u8Mode <<(A_PinNo*2));
			break;
		}
	}

}
 8000200:	e14f      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOA -> MODER &= ~(0b11 << (A_PinNo*2));
 8000202:	4b98      	ldr	r3, [pc, #608]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	79ba      	ldrb	r2, [r7, #6]
 8000208:	0052      	lsls	r2, r2, #1
 800020a:	2103      	movs	r1, #3
 800020c:	fa01 f202 	lsl.w	r2, r1, r2
 8000210:	43d2      	mvns	r2, r2
 8000212:	4611      	mov	r1, r2
 8000214:	4a93      	ldr	r2, [pc, #588]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000216:	400b      	ands	r3, r1
 8000218:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER |= (A_u8Mode <<(A_PinNo*2));
 800021a:	4b92      	ldr	r3, [pc, #584]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	7979      	ldrb	r1, [r7, #5]
 8000220:	79ba      	ldrb	r2, [r7, #6]
 8000222:	0052      	lsls	r2, r2, #1
 8000224:	fa01 f202 	lsl.w	r2, r1, r2
 8000228:	4611      	mov	r1, r2
 800022a:	4a8e      	ldr	r2, [pc, #568]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800022c:	430b      	orrs	r3, r1
 800022e:	6013      	str	r3, [r2, #0]
			break;
 8000230:	e137      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOB -> MODER &= ~(0b11 << (A_PinNo*2));
 8000232:	4b8d      	ldr	r3, [pc, #564]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	79ba      	ldrb	r2, [r7, #6]
 8000238:	0052      	lsls	r2, r2, #1
 800023a:	2103      	movs	r1, #3
 800023c:	fa01 f202 	lsl.w	r2, r1, r2
 8000240:	43d2      	mvns	r2, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a88      	ldr	r2, [pc, #544]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 8000246:	400b      	ands	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
			GPIOB -> MODER |= (A_u8Mode <<(A_PinNo*2));
 800024a:	4b87      	ldr	r3, [pc, #540]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	7979      	ldrb	r1, [r7, #5]
 8000250:	79ba      	ldrb	r2, [r7, #6]
 8000252:	0052      	lsls	r2, r2, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	4611      	mov	r1, r2
 800025a:	4a83      	ldr	r2, [pc, #524]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800025c:	430b      	orrs	r3, r1
 800025e:	6013      	str	r3, [r2, #0]
			break;
 8000260:	e11f      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOC -> MODER &= ~(0b11 << (A_PinNo*2));
 8000262:	4b82      	ldr	r3, [pc, #520]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	79ba      	ldrb	r2, [r7, #6]
 8000268:	0052      	lsls	r2, r2, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	43d2      	mvns	r2, r2
 8000272:	4611      	mov	r1, r2
 8000274:	4a7d      	ldr	r2, [pc, #500]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000276:	400b      	ands	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
			GPIOC -> MODER |= (A_u8Mode <<(A_PinNo*2));
 800027a:	4b7c      	ldr	r3, [pc, #496]	; (800046c <MGPIO_vSetPinMode+0x298>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	7979      	ldrb	r1, [r7, #5]
 8000280:	79ba      	ldrb	r2, [r7, #6]
 8000282:	0052      	lsls	r2, r2, #1
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	4611      	mov	r1, r2
 800028a:	4a78      	ldr	r2, [pc, #480]	; (800046c <MGPIO_vSetPinMode+0x298>)
 800028c:	430b      	orrs	r3, r1
 800028e:	6013      	str	r3, [r2, #0]
			break;
 8000290:	e107      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
	else if(A_u8Mode == GPIO_MODE_OUTPUT){
 8000292:	797b      	ldrb	r3, [r7, #5]
 8000294:	2b01      	cmp	r3, #1
 8000296:	d152      	bne.n	800033e <MGPIO_vSetPinMode+0x16a>
		switch(A_u8PortId){
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b02      	cmp	r3, #2
 800029c:	d037      	beq.n	800030e <MGPIO_vSetPinMode+0x13a>
 800029e:	2b02      	cmp	r3, #2
 80002a0:	f300 80ff 	bgt.w	80004a2 <MGPIO_vSetPinMode+0x2ce>
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <MGPIO_vSetPinMode+0xda>
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d018      	beq.n	80002de <MGPIO_vSetPinMode+0x10a>
}
 80002ac:	e0f9      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOA -> MODER &= ~(0b11 << (A_PinNo*2));
 80002ae:	4b6d      	ldr	r3, [pc, #436]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	79ba      	ldrb	r2, [r7, #6]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2103      	movs	r1, #3
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	43d2      	mvns	r2, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a68      	ldr	r2, [pc, #416]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 80002c2:	400b      	ands	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER |= (A_u8Mode <<(A_PinNo*2));
 80002c6:	4b67      	ldr	r3, [pc, #412]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	7979      	ldrb	r1, [r7, #5]
 80002cc:	79ba      	ldrb	r2, [r7, #6]
 80002ce:	0052      	lsls	r2, r2, #1
 80002d0:	fa01 f202 	lsl.w	r2, r1, r2
 80002d4:	4611      	mov	r1, r2
 80002d6:	4a63      	ldr	r2, [pc, #396]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 80002d8:	430b      	orrs	r3, r1
 80002da:	6013      	str	r3, [r2, #0]
			break;
 80002dc:	e0e1      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOB -> MODER &= ~(0b11 << (A_PinNo*2));
 80002de:	4b62      	ldr	r3, [pc, #392]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	79ba      	ldrb	r2, [r7, #6]
 80002e4:	0052      	lsls	r2, r2, #1
 80002e6:	2103      	movs	r1, #3
 80002e8:	fa01 f202 	lsl.w	r2, r1, r2
 80002ec:	43d2      	mvns	r2, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a5d      	ldr	r2, [pc, #372]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 80002f2:	400b      	ands	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
			GPIOB -> MODER |= (A_u8Mode <<(A_PinNo*2));
 80002f6:	4b5c      	ldr	r3, [pc, #368]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7979      	ldrb	r1, [r7, #5]
 80002fc:	79ba      	ldrb	r2, [r7, #6]
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a58      	ldr	r2, [pc, #352]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 8000308:	430b      	orrs	r3, r1
 800030a:	6013      	str	r3, [r2, #0]
			break;
 800030c:	e0c9      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOC -> MODER &= ~(0b11 << (A_PinNo*2));
 800030e:	4b57      	ldr	r3, [pc, #348]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	79ba      	ldrb	r2, [r7, #6]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	2103      	movs	r1, #3
 8000318:	fa01 f202 	lsl.w	r2, r1, r2
 800031c:	43d2      	mvns	r2, r2
 800031e:	4611      	mov	r1, r2
 8000320:	4a52      	ldr	r2, [pc, #328]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000322:	400b      	ands	r3, r1
 8000324:	6013      	str	r3, [r2, #0]
			GPIOC -> MODER |= (A_u8Mode <<(A_PinNo*2));
 8000326:	4b51      	ldr	r3, [pc, #324]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	7979      	ldrb	r1, [r7, #5]
 800032c:	79ba      	ldrb	r2, [r7, #6]
 800032e:	0052      	lsls	r2, r2, #1
 8000330:	fa01 f202 	lsl.w	r2, r1, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a4d      	ldr	r2, [pc, #308]	; (800046c <MGPIO_vSetPinMode+0x298>)
 8000338:	430b      	orrs	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
			break;
 800033c:	e0b1      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
	else if(A_u8Mode == GPIO_MODE_ALTFUN){
 800033e:	797b      	ldrb	r3, [r7, #5]
 8000340:	2b02      	cmp	r3, #2
 8000342:	d152      	bne.n	80003ea <MGPIO_vSetPinMode+0x216>
		switch(A_u8PortId){
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d037      	beq.n	80003ba <MGPIO_vSetPinMode+0x1e6>
 800034a:	2b02      	cmp	r3, #2
 800034c:	f300 80a9 	bgt.w	80004a2 <MGPIO_vSetPinMode+0x2ce>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <MGPIO_vSetPinMode+0x186>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d018      	beq.n	800038a <MGPIO_vSetPinMode+0x1b6>
}
 8000358:	e0a3      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOA -> MODER &= ~(0b11 << (A_PinNo*2));
 800035a:	4b42      	ldr	r3, [pc, #264]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	79ba      	ldrb	r2, [r7, #6]
 8000360:	0052      	lsls	r2, r2, #1
 8000362:	2103      	movs	r1, #3
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a3d      	ldr	r2, [pc, #244]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800036e:	400b      	ands	r3, r1
 8000370:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER |= (A_u8Mode <<(A_PinNo*2));
 8000372:	4b3c      	ldr	r3, [pc, #240]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	7979      	ldrb	r1, [r7, #5]
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	4611      	mov	r1, r2
 8000382:	4a38      	ldr	r2, [pc, #224]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000384:	430b      	orrs	r3, r1
 8000386:	6013      	str	r3, [r2, #0]
			break;
 8000388:	e08b      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOB -> MODER &= ~(0b11 << (A_PinNo*2));
 800038a:	4b37      	ldr	r3, [pc, #220]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	79ba      	ldrb	r2, [r7, #6]
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	43d2      	mvns	r2, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a32      	ldr	r2, [pc, #200]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800039e:	400b      	ands	r3, r1
 80003a0:	6013      	str	r3, [r2, #0]
			GPIOB -> MODER |= (A_u8Mode <<(A_PinNo*2));
 80003a2:	4b31      	ldr	r3, [pc, #196]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	7979      	ldrb	r1, [r7, #5]
 80003a8:	79ba      	ldrb	r2, [r7, #6]
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	fa01 f202 	lsl.w	r2, r1, r2
 80003b0:	4611      	mov	r1, r2
 80003b2:	4a2d      	ldr	r2, [pc, #180]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 80003b4:	430b      	orrs	r3, r1
 80003b6:	6013      	str	r3, [r2, #0]
			break;
 80003b8:	e073      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOC -> MODER &= ~(0b11 << (A_PinNo*2));
 80003ba:	4b2c      	ldr	r3, [pc, #176]	; (800046c <MGPIO_vSetPinMode+0x298>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	79ba      	ldrb	r2, [r7, #6]
 80003c0:	0052      	lsls	r2, r2, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f202 	lsl.w	r2, r1, r2
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a27      	ldr	r2, [pc, #156]	; (800046c <MGPIO_vSetPinMode+0x298>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	6013      	str	r3, [r2, #0]
			GPIOC -> MODER |= (A_u8Mode <<(A_PinNo*2));
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <MGPIO_vSetPinMode+0x298>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	7979      	ldrb	r1, [r7, #5]
 80003d8:	79ba      	ldrb	r2, [r7, #6]
 80003da:	0052      	lsls	r2, r2, #1
 80003dc:	fa01 f202 	lsl.w	r2, r1, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <MGPIO_vSetPinMode+0x298>)
 80003e4:	430b      	orrs	r3, r1
 80003e6:	6013      	str	r3, [r2, #0]
			break;
 80003e8:	e05b      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
	else if(A_u8Mode == GPIO_MODE_ANALOG){
 80003ea:	797b      	ldrb	r3, [r7, #5]
 80003ec:	2b03      	cmp	r3, #3
 80003ee:	d157      	bne.n	80004a0 <MGPIO_vSetPinMode+0x2cc>
		switch(A_u8PortId){
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d03c      	beq.n	8000470 <MGPIO_vSetPinMode+0x29c>
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	dc53      	bgt.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d002      	beq.n	8000404 <MGPIO_vSetPinMode+0x230>
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d018      	beq.n	8000434 <MGPIO_vSetPinMode+0x260>
}
 8000402:	e04e      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOA -> MODER &= ~(0b11 << (A_PinNo*2));
 8000404:	4b17      	ldr	r3, [pc, #92]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a13      	ldr	r2, [pc, #76]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 8000418:	400b      	ands	r3, r1
 800041a:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER |= (A_u8Mode <<(A_PinNo*2));
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	7979      	ldrb	r1, [r7, #5]
 8000422:	79ba      	ldrb	r2, [r7, #6]
 8000424:	0052      	lsls	r2, r2, #1
 8000426:	fa01 f202 	lsl.w	r2, r1, r2
 800042a:	4611      	mov	r1, r2
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <MGPIO_vSetPinMode+0x290>)
 800042e:	430b      	orrs	r3, r1
 8000430:	6013      	str	r3, [r2, #0]
			break;
 8000432:	e036      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
			GPIOB -> MODER &= ~(0b11 << (A_PinNo*2));
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	79ba      	ldrb	r2, [r7, #6]
 800043a:	0052      	lsls	r2, r2, #1
 800043c:	2103      	movs	r1, #3
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	43d2      	mvns	r2, r2
 8000444:	4611      	mov	r1, r2
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 8000448:	400b      	ands	r3, r1
 800044a:	6013      	str	r3, [r2, #0]
			GPIOB -> MODER |= (A_u8Mode <<(A_PinNo*2));
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	7979      	ldrb	r1, [r7, #5]
 8000452:	79ba      	ldrb	r2, [r7, #6]
 8000454:	0052      	lsls	r2, r2, #1
 8000456:	fa01 f202 	lsl.w	r2, r1, r2
 800045a:	4611      	mov	r1, r2
 800045c:	4a02      	ldr	r2, [pc, #8]	; (8000468 <MGPIO_vSetPinMode+0x294>)
 800045e:	430b      	orrs	r3, r1
 8000460:	6013      	str	r3, [r2, #0]
			break;
 8000462:	e01e      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
 8000464:	40020000 	.word	0x40020000
 8000468:	40020400 	.word	0x40020400
 800046c:	40020800 	.word	0x40020800
			GPIOC -> MODER &= ~(0b11 << (A_PinNo*2));
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MGPIO_vSetPinMode+0x2dc>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	2103      	movs	r1, #3
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <MGPIO_vSetPinMode+0x2dc>)
 8000484:	400b      	ands	r3, r1
 8000486:	6013      	str	r3, [r2, #0]
			GPIOC -> MODER |= (A_u8Mode <<(A_PinNo*2));
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <MGPIO_vSetPinMode+0x2dc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	7979      	ldrb	r1, [r7, #5]
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <MGPIO_vSetPinMode+0x2dc>)
 800049a:	430b      	orrs	r3, r1
 800049c:	6013      	str	r3, [r2, #0]
			break;
 800049e:	e000      	b.n	80004a2 <MGPIO_vSetPinMode+0x2ce>
	}
 80004a0:	bf00      	nop
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40020800 	.word	0x40020800

080004b4 <MGPIO_vSetPinOutputType>:

void MGPIO_vSetPinOutputType(u8 A_u8PortId, u8 A_u8PinNo, u8 A_u8OutPutType){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
 80004be:	460b      	mov	r3, r1
 80004c0:	71bb      	strb	r3, [r7, #6]
 80004c2:	4613      	mov	r3, r2
 80004c4:	717b      	strb	r3, [r7, #5]

	if (A_u8OutPutType == GPIO_OPENDRAIN){
 80004c6:	797b      	ldrb	r3, [r7, #5]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d12a      	bne.n	8000522 <MGPIO_vSetPinOutputType+0x6e>
		switch(A_u8PortId){
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d01c      	beq.n	800050c <MGPIO_vSetPinOutputType+0x58>
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	dc57      	bgt.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <MGPIO_vSetPinOutputType+0x2c>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d00b      	beq.n	80004f6 <MGPIO_vSetPinOutputType+0x42>
			CLR_BIT(GPIOC -> OTYPER, A_u8PinNo);
			break;
		}
	}

}
 80004de:	e052      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			SET_BIT(GPIOA -> OTYPER, A_u8PinNo);
 80004e0:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <MGPIO_vSetPinOutputType+0xe0>)
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	79ba      	ldrb	r2, [r7, #6]
 80004e6:	2101      	movs	r1, #1
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a29      	ldr	r2, [pc, #164]	; (8000594 <MGPIO_vSetPinOutputType+0xe0>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6053      	str	r3, [r2, #4]
			break;
 80004f4:	e047      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			SET_BIT(GPIOB -> OTYPER, A_u8PinNo);
 80004f6:	4b28      	ldr	r3, [pc, #160]	; (8000598 <MGPIO_vSetPinOutputType+0xe4>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	79ba      	ldrb	r2, [r7, #6]
 80004fc:	2101      	movs	r1, #1
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a24      	ldr	r2, [pc, #144]	; (8000598 <MGPIO_vSetPinOutputType+0xe4>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6053      	str	r3, [r2, #4]
			break;
 800050a:	e03c      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			SET_BIT(GPIOC -> OTYPER, A_u8PinNo);
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MGPIO_vSetPinOutputType+0xe8>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	79ba      	ldrb	r2, [r7, #6]
 8000512:	2101      	movs	r1, #1
 8000514:	fa01 f202 	lsl.w	r2, r1, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MGPIO_vSetPinOutputType+0xe8>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6053      	str	r3, [r2, #4]
			break;
 8000520:	e031      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
	else if (A_u8OutPutType == GPIO_PUSHPULL){
 8000522:	797b      	ldrb	r3, [r7, #5]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d12d      	bne.n	8000584 <MGPIO_vSetPinOutputType+0xd0>
		switch(A_u8PortId){
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d01e      	beq.n	800056c <MGPIO_vSetPinOutputType+0xb8>
 800052e:	2b02      	cmp	r3, #2
 8000530:	dc29      	bgt.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <MGPIO_vSetPinOutputType+0x88>
 8000536:	2b01      	cmp	r3, #1
 8000538:	d00c      	beq.n	8000554 <MGPIO_vSetPinOutputType+0xa0>
}
 800053a:	e024      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			CLR_BIT(GPIOA -> OTYPER, A_u8PinNo);
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MGPIO_vSetPinOutputType+0xe0>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	79ba      	ldrb	r2, [r7, #6]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	43d2      	mvns	r2, r2
 800054a:	4611      	mov	r1, r2
 800054c:	4a11      	ldr	r2, [pc, #68]	; (8000594 <MGPIO_vSetPinOutputType+0xe0>)
 800054e:	400b      	ands	r3, r1
 8000550:	6053      	str	r3, [r2, #4]
			break;
 8000552:	e018      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			CLR_BIT(GPIOB -> OTYPER, A_u8PinNo);
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MGPIO_vSetPinOutputType+0xe4>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	79ba      	ldrb	r2, [r7, #6]
 800055a:	2101      	movs	r1, #1
 800055c:	fa01 f202 	lsl.w	r2, r1, r2
 8000560:	43d2      	mvns	r2, r2
 8000562:	4611      	mov	r1, r2
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <MGPIO_vSetPinOutputType+0xe4>)
 8000566:	400b      	ands	r3, r1
 8000568:	6053      	str	r3, [r2, #4]
			break;
 800056a:	e00c      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
			CLR_BIT(GPIOC -> OTYPER, A_u8PinNo);
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MGPIO_vSetPinOutputType+0xe8>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	79ba      	ldrb	r2, [r7, #6]
 8000572:	2101      	movs	r1, #1
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	43d2      	mvns	r2, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <MGPIO_vSetPinOutputType+0xe8>)
 800057e:	400b      	ands	r3, r1
 8000580:	6053      	str	r3, [r2, #4]
			break;
 8000582:	e000      	b.n	8000586 <MGPIO_vSetPinOutputType+0xd2>
	}
 8000584:	bf00      	nop
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40020000 	.word	0x40020000
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800

080005a0 <MGPIO_vSetAlternativeFunction>:



}

void MGPIO_vSetAlternativeFunction(u8 A_u8PortId, u8 A_u8PinNo, u8 A_u8AltFun){
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	460b      	mov	r3, r1
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	4613      	mov	r3, r2
 80005b0:	717b      	strb	r3, [r7, #5]
	/******************* ASSIGNMENT **********************************/
	/*first we need to decide whitch register we will choose*/
	/*AFRL for pins (0->7) & AFRH for pins (8->15)*/
	if (A_u8PinNo< 8){
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	d852      	bhi.n	800065e <MGPIO_vSetAlternativeFunction+0xbe>
	switch(A_u8PortId){
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b02      	cmp	r3, #2
 80005bc:	d037      	beq.n	800062e <MGPIO_vSetAlternativeFunction+0x8e>
 80005be:	2b02      	cmp	r3, #2
 80005c0:	f300 80a6 	bgt.w	8000710 <MGPIO_vSetAlternativeFunction+0x170>
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <MGPIO_vSetAlternativeFunction+0x2e>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d018      	beq.n	80005fe <MGPIO_vSetAlternativeFunction+0x5e>
				break;

		}

		}
}
 80005cc:	e0a0      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
			GPIOA -> AFRL &= ~(0b1111<<(A_u8PinNo*4 )); // to be sure that the bits are cleared before the (OR )operation)
 80005ce:	4b53      	ldr	r3, [pc, #332]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	0092      	lsls	r2, r2, #2
 80005d6:	210f      	movs	r1, #15
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	43d2      	mvns	r2, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a4e      	ldr	r2, [pc, #312]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 80005e2:	400b      	ands	r3, r1
 80005e4:	6213      	str	r3, [r2, #32]
			GPIOA -> AFRL|= (A_u8AltFun<<(A_u8PinNo*4 ));//عاوز احط 4 بيت في حتة معينة في الريجيستر
 80005e6:	4b4d      	ldr	r3, [pc, #308]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 80005e8:	6a1b      	ldr	r3, [r3, #32]
 80005ea:	7979      	ldrb	r1, [r7, #5]
 80005ec:	79ba      	ldrb	r2, [r7, #6]
 80005ee:	0092      	lsls	r2, r2, #2
 80005f0:	fa01 f202 	lsl.w	r2, r1, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a49      	ldr	r2, [pc, #292]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6213      	str	r3, [r2, #32]
			break;
 80005fc:	e088      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
			GPIOB -> AFRL &= ~(0b1111<<(A_u8PinNo*4 ));
 80005fe:	4b48      	ldr	r3, [pc, #288]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	79ba      	ldrb	r2, [r7, #6]
 8000604:	0092      	lsls	r2, r2, #2
 8000606:	210f      	movs	r1, #15
 8000608:	fa01 f202 	lsl.w	r2, r1, r2
 800060c:	43d2      	mvns	r2, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a43      	ldr	r2, [pc, #268]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 8000612:	400b      	ands	r3, r1
 8000614:	6213      	str	r3, [r2, #32]
			GPIOB -> AFRL|= (A_u8AltFun<<(A_u8PinNo*4 ));
 8000616:	4b42      	ldr	r3, [pc, #264]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 8000618:	6a1b      	ldr	r3, [r3, #32]
 800061a:	7979      	ldrb	r1, [r7, #5]
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	fa01 f202 	lsl.w	r2, r1, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a3e      	ldr	r2, [pc, #248]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 8000628:	430b      	orrs	r3, r1
 800062a:	6213      	str	r3, [r2, #32]
			break;
 800062c:	e070      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
			GPIOC -> AFRL &= ~(0b1111<<(A_u8PinNo*4 ));
 800062e:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 8000630:	6a1b      	ldr	r3, [r3, #32]
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	0092      	lsls	r2, r2, #2
 8000636:	210f      	movs	r1, #15
 8000638:	fa01 f202 	lsl.w	r2, r1, r2
 800063c:	43d2      	mvns	r2, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a38      	ldr	r2, [pc, #224]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 8000642:	400b      	ands	r3, r1
 8000644:	6213      	str	r3, [r2, #32]
			GPIOC -> AFRL|= (A_u8AltFun<<(A_u8PinNo*4 ));
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 8000648:	6a1b      	ldr	r3, [r3, #32]
 800064a:	7979      	ldrb	r1, [r7, #5]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	0092      	lsls	r2, r2, #2
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	4611      	mov	r1, r2
 8000656:	4a33      	ldr	r2, [pc, #204]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6213      	str	r3, [r2, #32]
			break;
 800065c:	e058      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
	else if (A_u8PinNo > 7){
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	2b07      	cmp	r3, #7
 8000662:	d954      	bls.n	800070e <MGPIO_vSetAlternativeFunction+0x16e>
		switch(A_u8PortId){
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d038      	beq.n	80006dc <MGPIO_vSetAlternativeFunction+0x13c>
 800066a:	2b02      	cmp	r3, #2
 800066c:	dc50      	bgt.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <MGPIO_vSetAlternativeFunction+0xd8>
 8000672:	2b01      	cmp	r3, #1
 8000674:	d019      	beq.n	80006aa <MGPIO_vSetAlternativeFunction+0x10a>
}
 8000676:	e04b      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
				GPIOA -> AFRH &= ~(0b1111<<(A_u8PinNo*4 ));
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 800067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	210f      	movs	r1, #15
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	43d2      	mvns	r2, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a24      	ldr	r2, [pc, #144]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 800068c:	400b      	ands	r3, r1
 800068e:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOA -> AFRH|= (A_u8AltFun<<((A_u8PinNo-8)*4 ));
 8000690:	4b22      	ldr	r3, [pc, #136]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	7979      	ldrb	r1, [r7, #5]
 8000696:	79ba      	ldrb	r2, [r7, #6]
 8000698:	3a08      	subs	r2, #8
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	4611      	mov	r1, r2
 80006a2:	4a1e      	ldr	r2, [pc, #120]	; (800071c <MGPIO_vSetAlternativeFunction+0x17c>)
 80006a4:	430b      	orrs	r3, r1
 80006a6:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80006a8:	e032      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
				GPIOB -> AFRH &= ~(0b1111<<(A_u8PinNo*4 ));
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	79ba      	ldrb	r2, [r7, #6]
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	210f      	movs	r1, #15
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 80006be:	400b      	ands	r3, r1
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOB -> AFRH|= (A_u8AltFun<<((A_u8PinNo-8)*4 ));
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	7979      	ldrb	r1, [r7, #5]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	3a08      	subs	r2, #8
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MGPIO_vSetAlternativeFunction+0x180>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80006da:	e019      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
				GPIOC -> AFRH &= ~(0b1111<<(A_u8PinNo*4 ));
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 80006de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	210f      	movs	r1, #15
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOC -> AFRH|= (A_u8AltFun<<((A_u8PinNo-8)*4 ));
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	7979      	ldrb	r1, [r7, #5]
 80006fa:	79ba      	ldrb	r2, [r7, #6]
 80006fc:	3a08      	subs	r2, #8
 80006fe:	0092      	lsls	r2, r2, #2
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	4611      	mov	r1, r2
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <MGPIO_vSetAlternativeFunction+0x184>)
 8000708:	430b      	orrs	r3, r1
 800070a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800070c:	e000      	b.n	8000710 <MGPIO_vSetAlternativeFunction+0x170>
		}
 800070e:	bf00      	nop
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40020000 	.word	0x40020000
 8000720:	40020400 	.word	0x40020400
 8000724:	40020800 	.word	0x40020800

08000728 <MRCC_vEnable_AHB1Clock>:
#endif

}

void MRCC_vEnable_AHB1Clock(u8 per_name)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	/*enable rcc AHB1*/
	SET_BIT(RCC ->AHB1ENR ,per_name );
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MRCC_vEnable_AHB1Clock+0x2c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	2101      	movs	r1, #1
 800073a:	fa01 f202 	lsl.w	r2, r1, r2
 800073e:	4611      	mov	r1, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <MRCC_vEnable_AHB1Clock+0x2c>)
 8000742:	430b      	orrs	r3, r1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <MRCC_vEnable_APB2Clock>:
	/*enable rcc APB1*/
	SET_BIT(RCC ->APB1ENR ,per_name );
}


void MRCC_vEnable_APB2Clock(u8 per_name){
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	/*enable rcc APB2*/
	SET_BIT(RCC ->APB2ENR , per_name);
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MRCC_vEnable_APB2Clock+0x2c>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	2101      	movs	r1, #1
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a04      	ldr	r2, [pc, #16]	; (8000784 <MRCC_vEnable_APB2Clock+0x2c>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6453      	str	r3, [r2, #68]	; 0x44
	}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <MSTK_vInit>:
static u8   G_u8SingleFlag ;



void MSTK_vInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
#endif
	/* 2- Interrupt enable or disable*/
#if STK_INTERRPUT_EN==ENABLE
	SET_BIT(STK->CTRL, TICKINT) ;
#endif
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <MUSART_voidInit>:

static void(*MUSART_CALLPTR)(void)   = 0 ;


void MUSART_voidInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

	/*Set Boaud Rate*/
	MUSART1->BRR = 0x683 ;   //baudRate 9600 bps   //baudRate 115200 bps, BRR = SystemClockFrequency(HSI = 16 MHZ) / (16 * baudRate) ->
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MUSART_voidInit+0x6c>)
 800079e:	f240 6283 	movw	r2, #1667	; 0x683
 80007a2:	609a      	str	r2, [r3, #8]
	/*OverSampling 16 Sample*/
	MUSART1->CR1.OVER8 = 0 ;   //BitField
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MUSART_voidInit+0x6c>)
 80007a6:	68d3      	ldr	r3, [r2, #12]
 80007a8:	f36f 33cf 	bfc	r3, #15, #1
 80007ac:	60d3      	str	r3, [r2, #12]
	/*8 Bit Word size*/
	MUSART1->CR1.M = 0 ;
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MUSART_voidInit+0x6c>)
 80007b0:	68d3      	ldr	r3, [r2, #12]
 80007b2:	f36f 330c 	bfc	r3, #12, #1
 80007b6:	60d3      	str	r3, [r2, #12]
	/*Disable Parity*/
	MUSART1->CR1.PCE = 	0 ;
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MUSART_voidInit+0x6c>)
 80007ba:	68d3      	ldr	r3, [r2, #12]
 80007bc:	f36f 238a 	bfc	r3, #10, #1
 80007c0:	60d3      	str	r3, [r2, #12]
	/*one Stop Bit*/
	CLR_BIT(MUSART1->CR2,12);
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MUSART_voidInit+0x6c>)
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <MUSART_voidInit+0x6c>)
 80007c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007cc:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MUSART_voidInit+0x6c>)
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <MUSART_voidInit+0x6c>)
 80007d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007d8:	6113      	str	r3, [r2, #16]
	/*Enable Trasmitter */
	MUSART1->CR1.TE = 1 ;
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <MUSART_voidInit+0x6c>)
 80007dc:	68d3      	ldr	r3, [r2, #12]
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	60d3      	str	r3, [r2, #12]
	/*Enable Receiver*/
	MUSART1->CR1.RE = 1 ;
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <MUSART_voidInit+0x6c>)
 80007e6:	68d3      	ldr	r3, [r2, #12]
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	60d3      	str	r3, [r2, #12]
	/*Receive interrupt  Enable*/
	MUSART1->CR1.RXNEIE = 0 ;
 80007ee:	4a05      	ldr	r2, [pc, #20]	; (8000804 <MUSART_voidInit+0x6c>)
 80007f0:	68d3      	ldr	r3, [r2, #12]
 80007f2:	f36f 1345 	bfc	r3, #5, #1
 80007f6:	60d3      	str	r3, [r2, #12]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40011000 	.word	0x40011000

08000808 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	MUSART_CALLPTR() ;
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <USART1_IRQHandler+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4798      	blx	r3

	MUSART1 -> SR = 0;
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <USART1_IRQHandler+0x18>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000001c 	.word	0x2000001c
 8000820:	40011000 	.word	0x40011000

08000824 <MUART_voidTransmit>:




void MUART_voidTransmit(u8 *Ptr_u8Data)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
	while(Ptr_u8Data[Local_u8Counter] != '\0')
 8000830:	e010      	b.n	8000854 <MUART_voidTransmit+0x30>
	{
		MUSART1 -> DR = Ptr_u8Data[Local_u8Counter];
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	781a      	ldrb	r2, [r3, #0]
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MUART_voidTransmit+0x4c>)
 800083c:	605a      	str	r2, [r3, #4]
		while(GET_BIT(MUSART1 -> SR, 7) == 0);
 800083e:	bf00      	nop
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MUART_voidTransmit+0x4c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	09db      	lsrs	r3, r3, #7
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f8      	beq.n	8000840 <MUART_voidTransmit+0x1c>
		Local_u8Counter++;
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3301      	adds	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
	while(Ptr_u8Data[Local_u8Counter] != '\0')
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1e8      	bne.n	8000832 <MUART_voidTransmit+0xe>

	}
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40011000 	.word	0x40011000

08000874 <MUART_u8Receive>:
	return (UART -> DR);
}
*/

u8 MUART_u8Receive (u32 copy_u32MaxTimeToWait)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	u32 timeout=0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
	u8 data=0;
 8000880:	2300      	movs	r3, #0
 8000882:	72fb      	strb	r3, [r7, #11]

	while(GET_BIT(MUSART1 -> SR, 5) == 0)
 8000884:	e009      	b.n	800089a <MUART_u8Receive+0x26>
	{
		timeout++;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3301      	adds	r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
		if(timeout == copy_u32MaxTimeToWait)
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d102      	bne.n	800089a <MUART_u8Receive+0x26>
		{
			data = 128;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	72fb      	strb	r3, [r7, #11]
			break;
 8000898:	e006      	b.n	80008a8 <MUART_u8Receive+0x34>
	while(GET_BIT(MUSART1 -> SR, 5) == 0)
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MUART_u8Receive+0x5c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d0ee      	beq.n	8000886 <MUART_u8Receive+0x12>
		}
	}
	if(data == 0)
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d102      	bne.n	80008b4 <MUART_u8Receive+0x40>
	{
		data = MUSART1 -> DR;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MUART_u8Receive+0x5c>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	72fb      	strb	r3, [r7, #11]
	}
	CLR_BIT(MUSART1 -> SR, 5);
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MUART_u8Receive+0x5c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a05      	ldr	r2, [pc, #20]	; (80008d0 <MUART_u8Receive+0x5c>)
 80008ba:	f023 0320 	bic.w	r3, r3, #32
 80008be:	6013      	str	r3, [r2, #0]
    return data;
 80008c0:	7afb      	ldrb	r3, [r7, #11]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40011000 	.word	0x40011000

080008d4 <HWIFI_u8CommandValidate>:


 u8 HWIFI_u8CommandValidate (u32 Copy_u32TimeOut)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09c      	sub	sp, #112	; 0x70
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter=0;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	u8 Local_u8ReceivedChar=0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	u8 Local_u8Response[100]={0};
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2260      	movs	r2, #96	; 0x60
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f97b 	bl	8000bf0 <memset>

	while(Local_u8ReceivedChar < 128)
 80008fa:	e010      	b.n	800091e <HWIFI_u8CommandValidate+0x4a>
	{
		Local_u8ReceivedChar = MUART_u8Receive(Copy_u32TimeOut);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ffb9 	bl	8000874 <MUART_u8Receive>
 8000902:	4603      	mov	r3, r0
 8000904:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		Local_u8Response[Local_u8Counter++] = Local_u8ReceivedChar;
 8000908:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
 8000912:	3370      	adds	r3, #112	; 0x70
 8000914:	443b      	add	r3, r7
 8000916:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800091a:	f803 2c68 	strb.w	r2, [r3, #-104]
	while(Local_u8ReceivedChar < 128)
 800091e:	f997 306e 	ldrsb.w	r3, [r7, #110]	; 0x6e
 8000922:	2b00      	cmp	r3, #0
 8000924:	daea      	bge.n	80008fc <HWIFI_u8CommandValidate+0x28>
	}

	for(Local_u8Counter=0; Local_u8Counter<100; Local_u8Counter++)
 8000926:	2300      	movs	r3, #0
 8000928:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800092c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000930:	2b63      	cmp	r3, #99	; 0x63
 8000932:	d83f      	bhi.n	80009b4 <HWIFI_u8CommandValidate+0xe0>
	{
		if(Local_u8Response[Local_u8Counter] == 'O' && Local_u8Response[Local_u8Counter+1] == 'K')
 8000934:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000938:	3370      	adds	r3, #112	; 0x70
 800093a:	443b      	add	r3, r7
 800093c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000940:	2b4f      	cmp	r3, #79	; 0x4f
 8000942:	d10a      	bne.n	800095a <HWIFI_u8CommandValidate+0x86>
 8000944:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000948:	3301      	adds	r3, #1
 800094a:	3370      	adds	r3, #112	; 0x70
 800094c:	443b      	add	r3, r7
 800094e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000952:	2b4b      	cmp	r3, #75	; 0x4b
 8000954:	d101      	bne.n	800095a <HWIFI_u8CommandValidate+0x86>
		{
			return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e02c      	b.n	80009b4 <HWIFI_u8CommandValidate+0xe0>
		}
		else if(Local_u8Response[Local_u8Counter] == 'N' && Local_u8Response[Local_u8Counter+1] == 'D' && Local_u8Response[Local_u8Counter+3] == 'O' && Local_u8Response[Local_u8Counter+4] == 'K')
 800095a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800095e:	3370      	adds	r3, #112	; 0x70
 8000960:	443b      	add	r3, r7
 8000962:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000966:	2b4e      	cmp	r3, #78	; 0x4e
 8000968:	d122      	bne.n	80009b0 <HWIFI_u8CommandValidate+0xdc>
 800096a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800096e:	3301      	adds	r3, #1
 8000970:	3370      	adds	r3, #112	; 0x70
 8000972:	443b      	add	r3, r7
 8000974:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000978:	2b44      	cmp	r3, #68	; 0x44
 800097a:	d119      	bne.n	80009b0 <HWIFI_u8CommandValidate+0xdc>
 800097c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000980:	3303      	adds	r3, #3
 8000982:	3370      	adds	r3, #112	; 0x70
 8000984:	443b      	add	r3, r7
 8000986:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800098a:	2b4f      	cmp	r3, #79	; 0x4f
 800098c:	d110      	bne.n	80009b0 <HWIFI_u8CommandValidate+0xdc>
 800098e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000992:	3304      	adds	r3, #4
 8000994:	3370      	adds	r3, #112	; 0x70
 8000996:	443b      	add	r3, r7
 8000998:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800099c:	2b4b      	cmp	r3, #75	; 0x4b
 800099e:	d107      	bne.n	80009b0 <HWIFI_u8CommandValidate+0xdc>
		{
			/* +IPD,1:0CLOSED */
			return Local_u8Response[Local_u8Counter+16];
 80009a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009a4:	3310      	adds	r3, #16
 80009a6:	3370      	adds	r3, #112	; 0x70
 80009a8:	443b      	add	r3, r7
 80009aa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80009ae:	e001      	b.n	80009b4 <HWIFI_u8CommandValidate+0xe0>
		}
		else
		{
			return 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e7ff      	b.n	80009b4 <HWIFI_u8CommandValidate+0xe0>
		}
	}
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3770      	adds	r7, #112	; 0x70
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HWIFI_voidInit>:
#include "../Inc/HAL/HESP/WIFI_interface.h"
#include "../Inc/HAL/HESP/WIFI_private.h"
#include "../Inc/HAL/HESP/WIFI_config.h"

void HWIFI_voidInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	u8 Local_u8Output=0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	71fb      	strb	r3, [r7, #7]
	
	while(Local_u8Output == 0)
 80009c6:	e007      	b.n	80009d8 <HWIFI_voidInit+0x1c>
	{
		MUART_voidTransmit("AT\r\n");
 80009c8:	480e      	ldr	r0, [pc, #56]	; (8000a04 <HWIFI_voidInit+0x48>)
 80009ca:	f7ff ff2b 	bl	8000824 <MUART_voidTransmit>
		Local_u8Output = HWIFI_u8CommandValidate(100000);
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <HWIFI_voidInit+0x4c>)
 80009d0:	f7ff ff80 	bl	80008d4 <HWIFI_u8CommandValidate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Output == 0)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f4      	beq.n	80009c8 <HWIFI_voidInit+0xc>
	}
	
	Local_u8Output=0;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Output == 0)
 80009e2:	e007      	b.n	80009f4 <HWIFI_voidInit+0x38>
	{
		MUART_voidTransmit("AT+CWMODE=1\r\n");
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <HWIFI_voidInit+0x50>)
 80009e6:	f7ff ff1d 	bl	8000824 <MUART_voidTransmit>
		Local_u8Output = HWIFI_u8CommandValidate(100000);
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <HWIFI_voidInit+0x4c>)
 80009ec:	f7ff ff72 	bl	80008d4 <HWIFI_u8CommandValidate>
 80009f0:	4603      	mov	r3, r0
 80009f2:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Output == 0)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f4      	beq.n	80009e4 <HWIFI_voidInit+0x28>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08000c18 	.word	0x08000c18
 8000a08:	000186a0 	.word	0x000186a0
 8000a0c:	08000c20 	.word	0x08000c20

08000a10 <HWIFI_voidConnectToNetwork>:

void HWIFI_voidConnectToNetwork (void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	u8 Local_u8Output=0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	71fb      	strb	r3, [r7, #7]
	
	while(Local_u8Output == 0)
 8000a1a:	e007      	b.n	8000a2c <HWIFI_voidConnectToNetwork+0x1c>
	{
		MUART_voidTransmit("AT+CWJAP_CUR=\"HUAWEI Y9 2019\",\"12312345\"\r\n");
 8000a1c:	4807      	ldr	r0, [pc, #28]	; (8000a3c <HWIFI_voidConnectToNetwork+0x2c>)
 8000a1e:	f7ff ff01 	bl	8000824 <MUART_voidTransmit>
		Local_u8Output = HWIFI_u8CommandValidate(100000);
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <HWIFI_voidConnectToNetwork+0x30>)
 8000a24:	f7ff ff56 	bl	80008d4 <HWIFI_u8CommandValidate>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Output == 0)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f4      	beq.n	8000a1c <HWIFI_voidConnectToNetwork+0xc>
	}
	
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08000c30 	.word	0x08000c30
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <HWIFI_voidConnectToServer>:

void HWIFI_voidConnectToServer (void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	u8 Local_u8Output=0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	
	while(Local_u8Output == 0)
 8000a4e:	e007      	b.n	8000a60 <HWIFI_voidConnectToServer+0x1c>
	{
		MUART_voidTransmit("AT+CIPSTART=\"TCP\",\"162.253.155.227\",80\r\n");
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <HWIFI_voidConnectToServer+0x2c>)
 8000a52:	f7ff fee7 	bl	8000824 <MUART_voidTransmit>
		Local_u8Output = HWIFI_u8CommandValidate(100000);
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <HWIFI_voidConnectToServer+0x30>)
 8000a58:	f7ff ff3c 	bl	80008d4 <HWIFI_u8CommandValidate>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
	while(Local_u8Output == 0)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f4      	beq.n	8000a50 <HWIFI_voidConnectToServer+0xc>
	}
	
	
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08000c5c 	.word	0x08000c5c
 8000a74:	000186a0 	.word	0x000186a0

08000a78 <HWIFI_u8GetData>:

u8 HWIFI_u8GetData (void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
	u8 data;
	
	HWIFI_voidConnectToServer();
 8000a7e:	f7ff ffe1 	bl	8000a44 <HWIFI_voidConnectToServer>
	
	MUART_voidTransmit("AT+CIPSEND=41\r\n");
 8000a82:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <HWIFI_u8GetData+0x38>)
 8000a84:	f7ff fece 	bl	8000824 <MUART_voidTransmit>
	data = HWIFI_u8CommandValidate(50000);
 8000a88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a8c:	f7ff ff22 	bl	80008d4 <HWIFI_u8CommandValidate>
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
	
	MUART_voidTransmit("GET http://imtarmgroup.6te.net/file.txt");
 8000a94:	4807      	ldr	r0, [pc, #28]	; (8000ab4 <HWIFI_u8GetData+0x3c>)
 8000a96:	f7ff fec5 	bl	8000824 <MUART_voidTransmit>
	data = HWIFI_u8CommandValidate(100000);
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <HWIFI_u8GetData+0x40>)
 8000a9c:	f7ff ff1a 	bl	80008d4 <HWIFI_u8CommandValidate>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71fb      	strb	r3, [r7, #7]
	
	return data;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
	
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08000c88 	.word	0x08000c88
 8000ab4:	08000c98 	.word	0x08000c98
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <main>:
#include "../Inc/MCAL/MUART/MUSART_Interface.h"
#include "../Inc/HAL/HESP/WIFI_interface.h"


int main()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	u8 data;
	MRCC_vEnable_AHB1Clock(0);	 //Enable POERTA
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fe30 	bl	8000728 <MRCC_vEnable_AHB1Clock>

	MRCC_vEnable_APB2Clock(4);  //Enable UART1
 8000ac8:	2004      	movs	r0, #4
 8000aca:	f7ff fe45 	bl	8000758 <MRCC_vEnable_APB2Clock>

	MSTK_vInit(); // Initialize the SysTick timer
 8000ace:	f7ff fe5b 	bl	8000788 <MSTK_vInit>


	MGPIO_vSetPinMode(GPIO_PORTA,PIN9, GPIO_MODE_ALTFUN);
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	2109      	movs	r1, #9
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fb7c 	bl	80001d4 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(GPIO_PORTA, PIN10, GPIO_MODE_ALTFUN);
 8000adc:	2202      	movs	r2, #2
 8000ade:	210a      	movs	r1, #10
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fb77 	bl	80001d4 <MGPIO_vSetPinMode>
	MGPIO_vSetAlternativeFunction(GPIO_PORTA,  PIN9,AF7);
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	2109      	movs	r1, #9
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff fd58 	bl	80005a0 <MGPIO_vSetAlternativeFunction>
	MGPIO_vSetAlternativeFunction(GPIO_PORTA,  PIN10, AF7);
 8000af0:	2207      	movs	r2, #7
 8000af2:	210a      	movs	r1, #10
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff fd53 	bl	80005a0 <MGPIO_vSetAlternativeFunction>

	MUSART_voidInit();
 8000afa:	f7ff fe4d 	bl	8000798 <MUSART_voidInit>

	 MGPIO_vSetPinMode(GPIO_PORTA,  PIN1, GPIO_MODE_OUTPUT);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fb66 	bl	80001d4 <MGPIO_vSetPinMode>
	 MGPIO_vSetPinOutputType(GPIO_PORTA,  PIN1, GPIO_PUSHPULL);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f7ff fcd1 	bl	80004b4 <MGPIO_vSetPinOutputType>
	 MGPIO_vSetPinOutputType(GPIO_PORTA,  PIN1, GPIO_PULL_DOWN);
 8000b12:	220a      	movs	r2, #10
 8000b14:	2101      	movs	r1, #1
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fccc 	bl	80004b4 <MGPIO_vSetPinOutputType>

	 HWIFI_voidInit();
 8000b1c:	f7ff ff4e 	bl	80009bc <HWIFI_voidInit>

	 HWIFI_voidConnectToNetwork ();
 8000b20:	f7ff ff76 	bl	8000a10 <HWIFI_voidConnectToNetwork>

	 HWIFI_voidConnectToServer ();
 8000b24:	f7ff ff8e 	bl	8000a44 <HWIFI_voidConnectToServer>

	 data= HWIFI_u8GetData ();
 8000b28:	f7ff ffa6 	bl	8000a78 <HWIFI_u8GetData>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]


	if (data == '1')
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b31      	cmp	r3, #49	; 0x31
 8000b34:	d105      	bne.n	8000b42 <main+0x86>
	{
		MGPIO_vSetPinMode(GPIO_PORTA, PIN1, GPIO_HIGH);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fb4a 	bl	80001d4 <MGPIO_vSetPinMode>
 8000b40:	e007      	b.n	8000b52 <main+0x96>
	}
	else if (data == '0')
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b30      	cmp	r3, #48	; 0x30
 8000b46:	d104      	bne.n	8000b52 <main+0x96>
	{
		MGPIO_vSetPinMode(GPIO_PORTA,  PIN1, GPIO_LOW);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fb41 	bl	80001d4 <MGPIO_vSetPinMode>
	}

	while(1)
 8000b52:	e7fe      	b.n	8000b52 <main+0x96>

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b82:	f000 f811 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff ff99 	bl	8000abc <main>

08000b8a <LoopForever>:

LoopForever:
  b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b98:	08000cc8 	.word	0x08000cc8
  ldr r2, =_sbss
 8000b9c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ba0:	20000020 	.word	0x20000020

08000ba4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	4d0d      	ldr	r5, [pc, #52]	; (8000be0 <__libc_init_array+0x38>)
 8000bac:	4c0d      	ldr	r4, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bae:	1b64      	subs	r4, r4, r5
 8000bb0:	10a4      	asrs	r4, r4, #2
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	4d0b      	ldr	r5, [pc, #44]	; (8000be8 <__libc_init_array+0x40>)
 8000bba:	4c0c      	ldr	r4, [pc, #48]	; (8000bec <__libc_init_array+0x44>)
 8000bbc:	f000 f820 	bl	8000c00 <_init>
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	10a4      	asrs	r4, r4, #2
 8000bc4:	2600      	movs	r6, #0
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08000cc0 	.word	0x08000cc0
 8000be4:	08000cc0 	.word	0x08000cc0
 8000be8:	08000cc0 	.word	0x08000cc0
 8000bec:	08000cc4 	.word	0x08000cc4

08000bf0 <memset>:
 8000bf0:	4402      	add	r2, r0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d100      	bne.n	8000bfa <memset+0xa>
 8000bf8:	4770      	bx	lr
 8000bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8000bfe:	e7f9      	b.n	8000bf4 <memset+0x4>

08000c00 <_init>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr

08000c0c <_fini>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	bf00      	nop
 8000c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c12:	bc08      	pop	{r3}
 8000c14:	469e      	mov	lr, r3
 8000c16:	4770      	bx	lr
